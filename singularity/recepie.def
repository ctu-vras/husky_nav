Bootstrap: docker
From: ros:noetic-perception

%files
    requirements.txt

%post
    export XDG_CACHE_HOME=/tmp/singularity-cache # pip cache

    # APT packages
    APT_PKGS="
        gcc
        g++
        bridge-utils
        build-essential
        htop
        net-tools
        screen
        sshpass
        tmux
        vim
        wget
        curl
        git
        python3-pip
        python3-catkin-tools
        "

    # ROS packages
    ROS_PKGS="\
        ros-noetic-ros-numpy \
        ros-noetic-jsk-rviz-plugins \
        ros-noetic-rviz \
        ros-noetic-navigation \
        ros-noetic-husky-* \
        ros-noetic-image-transport-codecs \
        ros-noetic-imu-transformer \
        ros-noetic-roslint \
        ros-noetic-grid-map \
        ros-noetic-rviz-imu-plugin \
        "

    apt update
    apt install -y ${APT_PKGS} ${ROS_PKGS}

    ws=/opt/ros/navigation_ws
    echo "WS directory: ${ws}"

    # Setup ROS workspace
    mkdir -p "${ws}/src/thirdparty"

    # download dependencies
    cd "${ws}/src"
    git clone https://github.com/ctu-vras/robingas_mission_gazebo.git -b monoforce
    wstool init
    wstool merge robingas_mission_gazebo/dependencies.rosinstall
    # wstool merge ${SINGULARITY_ROOTFS}/../dependencies.rosinstall
    wstool up -j 4

    # Norlab SLAM dependencies
    # build libnabo
    cd "${ws}/src/thirdparty/"
    git clone https://github.com/ethz-asl/libnabo
    nabo_build=$ws/src/thirdparty/libnabo/build/
    mkdir -p $nabo_build && cd $nabo_build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo $ws/src/thirdparty/libnabo/
    cd $nabo_build && make && make install

    # build libpointmatcher
    cd "${ws}/src/thirdparty/"
    git clone https://github.com/ethz-asl/libpointmatcher
    lpm_build=$ws/src/thirdparty/libpointmacher/build/
    mkdir -p $lpm_build && cd $lpm_build && cmake $ws/src/thirdparty/libpointmatcher/
    cd $lpm_build && make && make install

    # build workspace
    cd "${ws}"
    catkin init
    catkin config --extend /opt/ros/noetic/
    catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release
    catkin build -c

    # Install Python packages
    pip install torch torchvision torchaudio torchmetrics tensorboard --extra-index-url https://download.pytorch.org/whl/cu113
    pip install "git+https://github.com/facebookresearch/pytorch3d.git@stable"
    pip install -r ${SINGULARITY_ROOTFS}/requirements.txt

    ln -s /usr/bin/python3 /usr/bin/python
