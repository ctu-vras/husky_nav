#!/usr/bin/env python

from stamped_msgs.msg import Float64
from sensor_msgs.msg import Imu
import rospy
from tf.transformations import euler_from_quaternion
import numpy as np


class Imu2Azimuth(object):
    def __init__(self, imu_topic='/imu/data'):
        self.mag_pub = rospy.Publisher(name='mag_azimuth', data_class=Float64, queue_size=1)
        self.imu_topic = rospy.get_param('~imu_in', imu_topic)
        self.imu_sub = rospy.Subscriber(imu_topic, data_class=Imu, queue_size=1, callback=self.imu_cb)
        rospy.loginfo('Subscribed to %s', self.imu_topic)

    def imu_cb(self, imu_msg):
        mag_azimuth_msg = Float64()
        q = [imu_msg.orientation.x, imu_msg.orientation.y, imu_msg.orientation.z, imu_msg.orientation.w]
        roll, pitch, yaw = euler_from_quaternion(q)
        rospy.logdebug('Roll [deg]: %f, Pitch [deg]: %f, Yaw [deg]: %f',
                       np.rad2deg(roll), np.rad2deg(pitch), np.rad2deg(yaw))
        mag_azimuth_msg.header = imu_msg.header
        mag_azimuth_msg.data = np.rad2deg(yaw)
        rospy.loginfo('Azimuth: %f', np.rad2deg(yaw))
        self.mag_pub.publish(mag_azimuth_msg)


if __name__ == "__main__":
    rospy.init_node('imu_to_mag_azimuth', anonymous=True, log_level=rospy.INFO)
    converter = Imu2Azimuth()
    rospy.spin()
